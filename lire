#!/usr/bin/env python3

import argparse
import ebooklib
from ebooklib import epub
from bs4 import BeautifulSoup
import curses

blank_index = -1
word_index = 0
is_redacted = True

def extract_content(book):
    chapters = []

    for item in book.get_items_of_type(ebooklib.ITEM_DOCUMENT):
        content = item.get_body_content()
        soup = BeautifulSoup(content, 'html.parser')
        chapter_text = soup.get_text()
        chapters.append(chapter_text)

    return chapters

def wrap_text(text, width):
    global word_index
    word_index = 0

    wrapped_lines = []
    lines = text.splitlines()
    current_paragraph = []
    for line in lines:
        if line.strip() and not line.startswith(' '):
            if current_paragraph:
                wrapped_lines.extend(wrap_paragraph(current_paragraph, width))
                wrapped_lines.append("")
                current_paragraph = []
            current_paragraph.append(line.strip())
        else:
            current_paragraph.append(line.strip())
    if current_paragraph:
        wrapped_lines.extend(wrap_paragraph(current_paragraph, width))
    return wrapped_lines

def wrap_paragraph(paragraph_lines, width):
    global blank_index, word_index
    wrapped = []
    current_line = ""

    words = []
    for line in paragraph_lines:
        words.extend(line.split())

    for word in words:
        if is_redacted and word_index <= blank_index:
            word = 'â–ˆ' * len(word)

        if len(current_line) + len(word) + (1 if current_line else 0) > width:
            wrapped.append(current_line)
            current_line = word
        else:
            if current_line:
                current_line += " "
            current_line += word

        word_index += 1

    if current_line:
        wrapped.append(current_line)

    return wrapped

def display_chapter(stdscr, chapter, start_line, height, width, chapter_number, total_chapters):
    lines = wrap_text(chapter, curses.COLS // 2)
    visible_lines = height - 2

    max_lines = len(lines)
    longest_line = max(len(line) for line in lines)
    left_padding = (width - longest_line) // 2

    for i in range(start_line, min(start_line + visible_lines, max_lines)):
        stdscr.addstr(i - start_line, left_padding, lines[i])

    footer = f"Page {chapter_number + 1} of {total_chapters} | Showing lines {start_line + 1} to {min(start_line + visible_lines, max_lines)} of {max_lines}"
    stdscr.addstr(height - 1, curses.COLS - len(footer) - 1, footer)

def tui_display(stdscr, chapters):
    curses.curs_set(0)

    global blank_index
    current_chapter = 0
    start_line = 0
    height, width = stdscr.getmaxyx()
    total_chapters = len(chapters) - 1

    while current_chapter < total_chapters:
        stdscr.clear()
        chapter = chapters[current_chapter]
        display_chapter(stdscr, chapter, start_line, height, width, current_chapter, total_chapters)
        stdscr.refresh()
        visible_lines = height - 2
        key = stdscr.getch()
        if key == curses.KEY_DOWN or key == ord('j'):
            if start_line < len(wrap_text(chapter, curses.COLS)) - visible_lines:
                start_line += 1
        elif key == curses.KEY_UP or key == ord('k'):
            if start_line > 0:
                start_line -= 1
        elif key == curses.KEY_RIGHT or key == ord('l'):
            if current_chapter < total_chapters - 1:
                current_chapter += 1
                start_line = 0
                blank_index = -1
        elif key == curses.KEY_LEFT or key == ord('h'):
            if current_chapter > 0:
                current_chapter -= 1
                start_line = 0
                blank_index = -1
        elif key == ord('f'):
            if start_line < len(wrap_text(chapter, curses.COLS)) - visible_lines:
                start_line += visible_lines
        elif key == ord('b'):
            if start_line >= visible_lines:
                start_line -= visible_lines
            elif start_line - visible_lines <= 0:
                start_line = 0
        elif key == ord('n'):
            blank_index += 1;
        elif key == ord('p'):
            if (blank_index > -1):
                blank_index -= 1;
        elif key == ord(' '):
            global is_redacted
            is_redacted = not is_redacted
        elif key == ord('P'):
            blank_index = -1;
        elif key == ord('q'):
            break

def main():
    parser = argparse.ArgumentParser(description='EPUB TUI Reader.')
    parser.add_argument('input_path', type=str, help='Path to EPUB file')
    parser.add_argument('-o', '--output', type=str, help='Output directory for chapter text files')
    args = parser.parse_args()
    book = epub.read_epub(args.input_path)
    chapters = extract_content(book)

    def curses_main(stdscr):
        tui_display(stdscr, chapters)

    curses.wrapper(curses_main)

if __name__ == "__main__":
    main()
